#!/usr/bin/python
# -*- coding: UTF-8 -*-

w=1000
size(w, w)
background(.1)
fill(1)

textos = [
    "supermemorias",
    "tempo\rcorrente",
    "o sol com filtro RGB",
    "repente da\rmaresia\rescaldante",
    "o mar",
    "brilho eterno de uma mente sem lembran√ßas",
    "o giro como\ratrator\restranho",
    "film curatorship\re obsolescencia\rtecnologica",
    "comeco,\rcolapso e\rrenovacao",
    "before the\rbeginning and\rafter the end",
    "hiroshima\rmon amour",
    "Faz\rescuro\rmas eu\rcanto",
    "quixada,\rquixele,\rquixelo",
    "a imagem\rdo som",
    "corrosao",
    "sentido e\rpermanencia",
    "oraculo\rpopular",
    "ecos",
    "aracati assu",
    "tangente",
    "oriente medio\rrastreado",
    "o cosmo e\ra pedra cariri",
    "corpo reta\re plano",
    "SUPERMEMORIAS",
    "TEMPO\rCORRENTEX",
    "O SOL COM\rFILTRO RGB",
    "aiaiou",
    "ioauueue",
]

baseline = {
    'a': +1, 
    'e': -1,
    'i': +1,
    'o': -1,
    'u': +1,
}

fontSize = 120
var("frase", NUMBER, 0.0, 0.0, 1.0)
var("escada", NUMBER, 0.35, 0.0, 1.0)
var("fontSize", NUMBER, 120, 10, 200)

deslocamento = fontSize * escada

font(face="NONNaturalGrotesk_TrialVersion-Regular", size=fontSize)

indice = int(frase*len(textos))
print(indice)
texto = textos[indice].decode('utf-8')

x = 40
base = 440

for letter in texto:
    p = textpath(letter, x, base)
    drawpath(p)
    
    x = x + p.bounds.w + 3
    
    lowerletter = letter.lower()
    if lowerletter in baseline.keys():
        base += deslocamento * baseline[lowerletter]
    
    if letter == ' ':
        x += fontSize * .35

    if letter == "\r":
        base += deslocamento * 5
        x = 40
        
        
colSize = WIDTH/len(texto)
letra = 0
fill(0,1,.1)
base = HEIGHT *.5
deslocamento = colSize*2
for letter in texto:
    lowerletter = letter.lower()
    if lowerletter in baseline.keys():
        base += deslocamento * baseline[lowerletter]
        
    x = letra * colSize
    if letter != " ":
        rect(x, base, colSize*.5, colSize*.15)
    letra += 1
    